"""
Django settings for auction_webapp project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
import redis
import django_redis
from dotenv import load_dotenv
import ssl as ssl_lib

load_dotenv()

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Add this near the top of the file, after the imports
DISABLE_COLLECTSTATIC = os.environ.get('DISABLE_COLLECTSTATIC', '0') == '1'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(f"Django BASE_DIR: {BASE_DIR}")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-8x1zg3y9w2m0v7l4k6j5h8f2d1s3a7p0q9e4r6t5y8u2i1o3p6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

# More secure ALLOWED_HOSTS configuration
if DEBUG:
    # Development environment - allow local access
    ALLOWED_HOSTS = [
        'localhost', 
        '127.0.0.1',
        '::1',  # IPv6 localhost
    ]
else:
    # Production environment - only allow specific domains
    ALLOWED_HOSTS = [
        'auction-management-system-877a79758b85.herokuapp.com',
        'ams.702market.com',
        '.702market.com',  # Allows subdomains of 702market.com
    ]

# Playwright settings
# PLAYWRIGHT_BROWSERS_PATH = os.environ.get("PLAYWRIGHT_BROWSERS_PATH", "/app/.cache/ms-playwright")

PLAYWRIGHT_BROWSERS = os.environ.get('PLAYWRIGHT_BROWSERS', 'chromium').split(',')

REDIS_URL = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')

# Add ssl_cert_reqs to Redis URL if using SSL
if REDIS_URL.startswith('rediss://'):
    REDIS_URL = f"{REDIS_URL}?ssl_cert_reqs=none"
    
# Celery Settings
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Los_Angeles'

# Redis cache configuration
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 20,
                "ssl_cert_reqs": None if REDIS_URL.startswith('rediss://') else None
            }
        }
    }
}

# Redis connection
if REDIS_URL.startswith('rediss://'):
    REDIS_CONN = redis.Redis.from_url(
        REDIS_URL,
        decode_responses=True,
        ssl_cert_reqs=None
    )
else:
    REDIS_CONN = redis.Redis.from_url(
        REDIS_URL,
        decode_responses=True
    )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auction',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'auction.middleware.LoginRequiredMiddleware',
]

ROOT_URLCONF = 'auction_webapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auction_webapp.wsgi.application'

AUTH_USER_MODEL = 'auction.CustomUser'

# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Database configuration
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            ssl_require=True
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Set CONN_MAX_AGE to 0 for both environments
DATABASES['default']['CONN_MAX_AGE'] = 0

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i8n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Los_Angeles'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Ensure your LOGGING configuration is sufficient for your needs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console'],
            'level': 'INFO',
        },
        'auction': {  # Logger for your app
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

N8N_HIBID_UPLOAD_ENDPOINT = 'https://n8n.702market.com/webhook/2e1ca1fa-9078-4c82-bb38-3650b38fea20'
SESSION_COOKIE_AGE = 3600  # 1 hour in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_SAMESITE = 'Strict'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/auction/'
LOGOUT_REDIRECT_URL = '/login/'

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_REFERRER_POLICY = 'same-origin'

# Add these lines after your STATIC_URL and STATICFILES_DIRS settings
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Add these lines for HiBid-related settings
DEFAULT_HIBID_IMAGE_PATH = BASE_DIR / 'auction' / 'resources' / 'hibid_stock' / 'default_image.jpg'
LOGO_702_PATH = BASE_DIR / 'auction' / 'resources' / 'bid_stock_photo' / '702_logo.png'

# Celery configuration
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
